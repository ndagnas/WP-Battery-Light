//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Instance.xaml.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du point d'entrée de l'application
// Créé le       : 31/05/2014
// Modifié le    : 19/08/2014
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Diagnostics;
using System.ComponentModel;
using System.IO.IsolatedStorage;
using System.Windows.Navigation;
using System.Runtime.Serialization;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Info;
using Microsoft.Phone.Shell;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Scheduler;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Batterie.Resources;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "Batterie"
//*******************************************************************************************************************************
namespace Batterie
	{

	//  #  #   #   ####  #####   ###   #   #   ###   #####
	//  #  ##  #  #        #    #   #  ##  #  #   #  #    
	//  #  # # #   ###     #    #####  # # #  #      ###  
	//  #  #  ##      #    #    #   #  #  ##  #   #  #    
	//  #  #   #  ####     #    #   #  #   #   ###   #####

	//***************************************************************************************************************************
	// Classe Instance
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit le poitn d'entrée de l'application.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public partial class Instance : Application
		{
		//***********************************************************************************************************************
		#region // Structure ReviewItem
		//-----------------------------------------------------------------------------------------------------------------------
		[DataContract]
		public struct ReviewItem
			{
			[DataMember]
			public int      StartUp         { get; set; }
			[DataMember]
			public bool     UserChoice      { get; set; }
			[DataMember]
			public int      RequestCount    { get; set; }
			[DataMember]
			public DateTime LastRequestDate { get; set; }
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private bool PhoneApplicationInitialized = false;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Instance</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Instance ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.UnhandledException += this.OnUnhandledException;

			this.InitializeComponent        ();
			this.InitializePhoneApplication ();
			this.RegisterBackgroundAgent    ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Debugger.IsAttached )
				{
				//---------------------------------------------------------------------------------------------------------------
				Application.Current.Host.Settings.EnableFrameRateCounter = false;

				PhoneApplicationService.Current.UserIdleDetectionMode = IdleDetectionMode.Disabled;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Evenements Application
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application se charge.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>LaunchingEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLaunching ( object Sender, LaunchingEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Scheduler.BatteryTile.Refresh ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application est activée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>ActivatedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnActivated ( object Sender, ActivatedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Scheduler.BatteryTile.Refresh ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application est désactivée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>DeactivatedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnDeactivated ( object Sender, DeactivatedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application se ferme.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>ClosingEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnClosing ( object Sender, ClosingEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand une exception est générée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>ApplicationUnhandledExceptionEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnUnhandledException ( object Sender, 
		                                              ApplicationUnhandledExceptionEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Debugger.IsAttached ) { Debugger.Break (); return; }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Evenements RootFrame
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand une navigation échoue.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationFailedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnNavigationFailed ( object Sender, NavigationFailedEventArgs Args )
			{ if ( Debugger.IsAttached ) Debugger.Break (); }
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void InitializePhoneApplication ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PhoneApplicationInitialized ) return;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.RootFrame            = new PhoneApplicationFrame ();
			this.RootFrame.Navigated += this.CompleteInitializePhoneApplication;

			this.RootFrame.NavigationFailed += this.OnNavigationFailed;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.PhoneApplicationInitialized = true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Complète l'initialisation.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void CompleteInitializePhoneApplication ( object Sender, NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.RootVisual != this.RootFrame ) this.RootVisual = this.RootFrame;

			this.RootFrame.Navigated -= this.CompleteInitializePhoneApplication;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Publiques
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Enregistre l'agent d'arrière plan.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void RegisterBackgroundAgent ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Windows Phone 8.1
			//-------------------------------------------------------------------------------------------------------------------
#if WP81
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				bool ScheduledAgentActive = false;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				var status = Windows.ApplicationModel.Background.BackgroundExecutionManager.RequestAccessAsync ().AsTask ();

				status.Wait ();

				if ( status.Result == Windows.ApplicationModel.Background.BackgroundAccessStatus.
				                                         AllowedWithAlwaysOnRealTimeConnectivity ||
					 status.Result == Windows.ApplicationModel.Background.BackgroundAccessStatus.
						                                  AllowedMayUseActiveRealTimeConnectivity )
					{
					//-----------------------------------------------------------------------------------------------------------
					foreach ( var Task in Windows.ApplicationModel.Background.
					                                          BackgroundTaskRegistration.AllTasks )
						{
						if ( Task.Value.Name == "BatteryScheduler" )
							{
							ScheduledAgentActive = true;

							break;
							}
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! ScheduledAgentActive )
						{
						//-------------------------------------------------------------------------------------------------------
						var NewTask = new Windows.ApplicationModel.Background.BackgroundTaskBuilder ();

						NewTask.Name           = "BatteryScheduler";
						NewTask.TaskEntryPoint = "Scheduler.ScheduledAgent";
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						NewTask.SetTrigger ( new Windows.ApplicationModel.Background.TimeTrigger ( 15, false ) );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						var TaskRegistration = NewTask.Register ();
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
#endif
			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#region // Windows Phone 8.0
			//-------------------------------------------------------------------------------------------------------------------
#if ! WP81

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				foreach ( var Task in ScheduledActionService.GetActions<PeriodicTask> () )
					{ ScheduledActionService.Remove ( Task.Name ); }
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				var PeriodicTask = new PeriodicTask ( "Battery-Scheduler" );

				PeriodicTask.Description = "Battery scheduled agent";

				ScheduledActionService.Add ( PeriodicTask );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
#endif			
			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Demande si la demande d'évaluation est faisable.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool ReviewAvailable ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			ReviewItem Review = new ReviewItem ()
				{
				//---------------------------------------------------------------------------------------------------------------
				StartUp         = 0, UserChoice      = false            ,
				RequestCount    = 0, LastRequestDate = DateTime.MinValue,
				//---------------------------------------------------------------------------------------------------------------
				};
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( IsolatedStorageSettings.ApplicationSettings.Contains ( "review" ) )
					Review = (ReviewItem)IsolatedStorageSettings.ApplicationSettings ["review"];
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Review.UserChoice                                   ) return false;
				if ( Review.StartUp      <  5                            ) return false;
				if ( Review.RequestCount >= 3                            ) return false;
				if ( Review.LastRequestDate.Date.Equals ( DateTime.Now ) ) return false;

				return ( DateTime.Now.Subtract ( Review.LastRequestDate ).TotalDays >= 30 );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			finally
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Review.UserChoice )
						{
						//-------------------------------------------------------------------------------------------------------
						Review.StartUp ++;

						IsolatedStorageSettings.ApplicationSettings ["review"] = Review;

						IsolatedStorageSettings.ApplicationSettings.Save ();
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Place en mémoire le fait que l'utilisateur a validé un choix sur l'évaluation.
		/// </summary>
		/// <param name="Log">Log à ajouter.</param>
		/// <param name="Args">Paramètres supplémentaires.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void RegisterReview ( bool Choice )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ReviewItem Review = new ReviewItem ()
				{
				//---------------------------------------------------------------------------------------------------------------
				StartUp         = 0, UserChoice      = Choice      ,
				RequestCount    = 0, LastRequestDate = DateTime.Now,
				//---------------------------------------------------------------------------------------------------------------
				};
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( IsolatedStorageSettings.ApplicationSettings.Contains ( "review" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					Review = (ReviewItem)IsolatedStorageSettings.ApplicationSettings ["review"];

					Review.RequestCount   ++;
					Review.UserChoice      = Choice;
					Review.LastRequestDate = DateTime.Now;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				IsolatedStorageSettings.ApplicationSettings ["review"] = Review;

				IsolatedStorageSettings.ApplicationSettings.Save ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obbtiens l'objet <b>PhoneApplicationFrame</b> de l'application.
		/// </summary>
		/// <returns>Objet <b>PhoneApplicationFrame</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public PhoneApplicationFrame RootFrame { get; private set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	//  ####   #   #   ###   #   #  #####   ####  #  #####  #####  #   #  #####  #  #       ####
	//  #   #  #   #  #   #  ##  #  #      #      #     #   #      #   #    #    #  #      #    
	//  ####   #####  #   #  # # #  ###     ###   #    #    ###    #   #    #    #  #       ### 
	//  #      #   #  #   #  #  ##  #          #  #   #     #      #   #    #    #  #          #
	//  #      #   #   ###   #   #  #####  ####   #  #####  #####   ###     #    #  #####  #### 

	//***************************************************************************************************************************
	// Classe PhoneSizeUtils
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet de gérer les différentes définitions.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class PhoneSizeUtils
		{
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>ScaleFactor</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static PhoneSizeUtils ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				var AppBar = new ApplicationBar () { Opacity = 0 };

				ApplicationBarHeight = AppBar.DefaultSize;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch { ApplicationBarHeight = 72; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! DesignerProperties.IsInDesignTool )
					{
					//-----------------------------------------------------------------------------------------------------------
					var Version81 = new Version ( 8, 1 );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Environment.OSVersion.Version >= Version81 )
						{
						//-------------------------------------------------------------------------------------------------------
						object SizeObject;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( DeviceExtendedProperties.TryGetValue ( "PhysicalScreenResolution", out SizeObject ) )
							{
							//---------------------------------------------------------------------------------------------------
							var screenResolution = (Size)SizeObject;

							object DpiObjet;
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							if ( DeviceExtendedProperties.TryGetValue ( "RawDpiY", out DpiObjet ) )
								{
								var Dpi = (double) DpiObjet;

								if ( Dpi > 0 )
									{
									var ScreenDiagonal = Math.Sqrt ( 
										Math.Pow ( screenResolution.Width  / Dpi, 2 ) + 
										Math.Pow ( screenResolution.Height / Dpi, 2 ) );

									if ( ScreenDiagonal >= 5 ) ApplicationBarHeight = 56;
									}
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la hauteur de la barre d'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static double ApplicationBarHeight { get; private set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "Batterie"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
